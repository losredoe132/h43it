
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803f00  00803f00  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000258  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000022  00008258  00000258  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000008  00803f00  00803f00  0000030e  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002493  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016a1  00000000  00000000  0000286f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000470  00000000  00000000  00003f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000128  00000000  00000000  00004380  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000114f  00000000  00000000  000044a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000022f  00000000  00000000  000055f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00005826  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	9e c0       	rjmp	.+316    	; 0x144 <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	af c0       	rjmp	.+350    	; 0x16e <__vector_7>
  10:	bd c0       	rjmp	.+378    	; 0x18c <__vector_8>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	fa c0       	rjmp	.+500    	; 0x210 <__vector_13>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2f e3       	ldi	r18, 0x3F	; 63
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	bf e3       	ldi	r27, 0x3F	; 63
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a8 30       	cpi	r26, 0x08	; 8
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	2c d0       	rcall	.+88     	; 0xaa <main>
  52:	00 c1       	rjmp	.+512    	; 0x254 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <TCA0_init>:
volatile uint8_t consecutive_counts_released ;



void TCA0_init(int TCAdelay)
{
  56:	9c 01       	movw	r18, r24
	// enable overflow interrupt
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_OVF_bm;
  58:	e0 e0       	ldi	r30, 0x00	; 0
  5a:	fa e0       	ldi	r31, 0x0A	; 10
  5c:	81 e0       	ldi	r24, 0x01	; 1
  5e:	82 87       	std	Z+10, r24	; 0x0a

	// set Normal mode
	TCA0.SINGLE.CTRLB = TCA_SINGLE_WGMODE_NORMAL_gc;
  60:	11 82       	std	Z+1, r1	; 0x01

	// disable event counting
	TCA0.SINGLE.EVCTRL &= ~(TCA_SINGLE_CNTEI_bm);
  62:	91 85       	ldd	r25, Z+9	; 0x09
  64:	9e 7f       	andi	r25, 0xFE	; 254
  66:	91 87       	std	Z+9, r25	; 0x09

	// set the period
	TCA0.SINGLE.PER = TCAdelay;
  68:	26 a3       	std	Z+38, r18	; 0x26
  6a:	37 a3       	std	Z+39, r19	; 0x27

	// set clock
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc | TCA_SINGLE_ENABLE_bm;    /* source (sys_clk/8) +  start timer */
  6c:	8f e0       	ldi	r24, 0x0F	; 15
  6e:	80 83       	st	Z, r24
  70:	08 95       	ret

00000072 <TCB0_init>:
}

void TCB0_init (void)
{
	/* Load the Compare or Capture register with the timeout value*/
	TCB0.CCMP = TCB_CMP_EXAMPLE_VALUE;
  72:	e0 e4       	ldi	r30, 0x40	; 64
  74:	fa e0       	ldi	r31, 0x0A	; 10
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	9f ef       	ldi	r25, 0xFF	; 255
  7a:	84 87       	std	Z+12, r24	; 0x0c
  7c:	95 87       	std	Z+13, r25	; 0x0d
	
	/* Enable TCB and set CLK_PER divider to 1 (No Prescaling) */
	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm ;
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	80 83       	st	Z, r24
	
	/* Enable Capture or Timeout interrupt */
	TCB0.INTCTRL = TCB_CAPT_bm;
  82:	85 83       	std	Z+5, r24	; 0x05
  84:	08 95       	ret

00000086 <LEDOnById>:
}


void LEDOnById(int i){
	PORTA.OUT = port_a_b_outs[i][0];
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	fc 01       	movw	r30, r24
  8c:	e8 5a       	subi	r30, 0xA8	; 168
  8e:	fd 47       	sbci	r31, 0x7D	; 125
  90:	80 81       	ld	r24, Z
  92:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <port_a_b_outs+0x7f81ac>
	PORTB.OUT= port_a_b_outs[i][1];
  96:	81 81       	ldd	r24, Z+1	; 0x01
  98:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <port_a_b_outs+0x7f81cc>
  9c:	08 95       	ret

0000009e <allLEDoff>:
}

void allLEDoff(){
	PORTA.OUT = port_a_b_outs[0][0];
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <port_a_b_outs+0x7f81ac>
	PORTB.OUT= port_a_b_outs[0][1];
  a4:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <port_a_b_outs+0x7f81cc>
  a8:	08 95       	ret

000000aa <main>:

int main() {


	//RTCA_init(1); // set periodic RTC triggering "awakening" delay in seconds
	TCA0_init(1);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	d3 df       	rcall	.-90     	; 0x56 <TCA0_init>
	TCB0_init();
  b0:	e0 df       	rcall	.-64     	; 0x72 <TCB0_init>
	
	PORTA.DIRSET = 0b10111111;
  b2:	e0 e0       	ldi	r30, 0x00	; 0
  b4:	f4 e0       	ldi	r31, 0x04	; 4
  b6:	8f eb       	ldi	r24, 0xBF	; 191
  b8:	81 83       	std	Z+1, r24	; 0x01
	PORTB.DIRSET = 0b11111111;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <port_a_b_outs+0x7f81c9>

	// Button setup
	PORTA.PIN6CTRL = PORT_ISC_FALLING_gc | PORT_PULLUPEN_bm; // Enable pull-up resistor
  c0:	8b e0       	ldi	r24, 0x0B	; 11
  c2:	86 8b       	std	Z+22, r24	; 0x16

	x=7;
  c4:	87 e0       	ldi	r24, 0x07	; 7
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	80 93 02 3f 	sts	0x3F02, r24	; 0x803f02 <x>
  cc:	90 93 03 3f 	sts	0x3F03, r25	; 0x803f03 <x+0x1>
	i=0;
  d0:	10 92 05 3f 	sts	0x3F05, r1	; 0x803f05 <i>
  d4:	10 92 06 3f 	sts	0x3F06, r1	; 0x803f06 <i+0x1>

	consecutive_counts_pressed=0;
  d8:	10 92 07 3f 	sts	0x3F07, r1	; 0x803f07 <consecutive_counts_pressed>
	consecutive_counts_released=0;
  dc:	10 92 04 3f 	sts	0x3F04, r1	; 0x803f04 <consecutive_counts_released>

	sei();
  e0:	78 94       	sei

	
	while (consecutive_counts_released<10){;}
  e2:	80 91 04 3f 	lds	r24, 0x3F04	; 0x803f04 <consecutive_counts_released>
  e6:	8a 30       	cpi	r24, 0x0A	; 10
  e8:	e0 f3       	brcs	.-8      	; 0xe2 <main+0x38>

	// TODO AWAKEING Animation!

	SLPCTRL.CTRLA |= SLPCTRL_SMODE_STDBY_gc; // set POWER DOWN as sleep mode
  ea:	e0 e5       	ldi	r30, 0x50	; 80
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	80 83       	st	Z, r24
	SLPCTRL.CTRLA |= SLPCTRL_SEN_bm; // enable sleep mode
  f4:	80 81       	ld	r24, Z
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	80 83       	st	Z, r24
		}
		if (consecutive_counts_released>100){
			allLEDoff();
			_delay_ms(300);
			//TCA0.SINGLE.CTRLA = 0x01;
			TCB0.CTRLA =  0x01;
  fa:	00 e4       	ldi	r16, 0x40	; 64
  fc:	1a e0       	ldi	r17, 0x0A	; 10
  fe:	c1 e0       	ldi	r28, 0x01	; 1


	
	while(1){
		
		if (consecutive_counts_pressed>50){
 100:	80 91 07 3f 	lds	r24, 0x3F07	; 0x803f07 <consecutive_counts_pressed>
 104:	83 33       	cpi	r24, 0x33	; 51
 106:	68 f0       	brcs	.+26     	; 0x122 <__DATA_REGION_LENGTH__+0x22>
			
			x ++;
 108:	80 91 02 3f 	lds	r24, 0x3F02	; 0x803f02 <x>
 10c:	90 91 03 3f 	lds	r25, 0x3F03	; 0x803f03 <x+0x1>
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	80 93 02 3f 	sts	0x3F02, r24	; 0x803f02 <x>
 116:	90 93 03 3f 	sts	0x3F03, r25	; 0x803f03 <x+0x1>
			while (consecutive_counts_released<10){;}
 11a:	80 91 04 3f 	lds	r24, 0x3F04	; 0x803f04 <consecutive_counts_released>
 11e:	8a 30       	cpi	r24, 0x0A	; 10
 120:	e0 f3       	brcs	.-8      	; 0x11a <__DATA_REGION_LENGTH__+0x1a>
			
		}
		if (consecutive_counts_released>100){
 122:	80 91 04 3f 	lds	r24, 0x3F04	; 0x803f04 <consecutive_counts_released>
 126:	85 36       	cpi	r24, 0x65	; 101
 128:	58 f3       	brcs	.-42     	; 0x100 <__DATA_REGION_LENGTH__>
			allLEDoff();
 12a:	b9 df       	rcall	.-142    	; 0x9e <allLEDoff>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	2f e3       	ldi	r18, 0x3F	; 63
 12e:	8d e0       	ldi	r24, 0x0D	; 13
 130:	93 e0       	ldi	r25, 0x03	; 3
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <__DATA_REGION_LENGTH__+0x32>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <__DATA_REGION_LENGTH__+0x3c>
 13c:	00 00       	nop
			_delay_ms(300);
			//TCA0.SINGLE.CTRLA = 0x01;
			TCB0.CTRLA =  0x01;
 13e:	f8 01       	movw	r30, r16
 140:	c0 83       	st	Z, r28
 142:	de cf       	rjmp	.-68     	; 0x100 <__DATA_REGION_LENGTH__>

00000144 <__vector_3>:
		
	}


}
ISR(PORTA_PORT_vect) {
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
	PORTA.INTFLAGS |= btn_pin; // Clear interrupt flag
 154:	e0 e0       	ldi	r30, 0x00	; 0
 156:	f4 e0       	ldi	r31, 0x04	; 4
 158:	81 85       	ldd	r24, Z+9	; 0x09
 15a:	80 64       	ori	r24, 0x40	; 64
 15c:	81 87       	std	Z+9, r24	; 0x09
}
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <__vector_7>:

ISR(RTC_PIT_vect)
{
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	8f 93       	push	r24
	RTC.PITINTFLAGS = RTC_PI_bm;// Clear interrupt flag
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <port_a_b_outs+0x7f7efb>
}
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <__vector_8>:

ISR(TCA0_OVF_vect)
{
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	2f 93       	push	r18
 198:	3f 93       	push	r19
 19a:	4f 93       	push	r20
 19c:	5f 93       	push	r21
 19e:	6f 93       	push	r22
 1a0:	7f 93       	push	r23
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
	i++;
 1ae:	80 91 05 3f 	lds	r24, 0x3F05	; 0x803f05 <i>
 1b2:	90 91 06 3f 	lds	r25, 0x3F06	; 0x803f06 <i+0x1>
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	80 93 05 3f 	sts	0x3F05, r24	; 0x803f05 <i>
 1bc:	90 93 06 3f 	sts	0x3F06, r25	; 0x803f06 <i+0x1>
	
	if (i<=x){LEDOnById(i);}
 1c0:	20 91 02 3f 	lds	r18, 0x3F02	; 0x803f02 <x>
 1c4:	30 91 03 3f 	lds	r19, 0x3F03	; 0x803f03 <x+0x1>
 1c8:	28 17       	cp	r18, r24
 1ca:	39 07       	cpc	r19, r25
 1cc:	14 f0       	brlt	.+4      	; 0x1d2 <__vector_8+0x46>
 1ce:	5b df       	rcall	.-330    	; 0x86 <LEDOnById>
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <__vector_8+0x48>
	else{allLEDoff();}
 1d2:	65 df       	rcall	.-310    	; 0x9e <allLEDoff>
	
	if (i>16){i=0;}
 1d4:	80 91 05 3f 	lds	r24, 0x3F05	; 0x803f05 <i>
 1d8:	90 91 06 3f 	lds	r25, 0x3F06	; 0x803f06 <i+0x1>
 1dc:	41 97       	sbiw	r24, 0x11	; 17
 1de:	24 f0       	brlt	.+8      	; 0x1e8 <__vector_8+0x5c>
 1e0:	10 92 05 3f 	sts	0x3F05, r1	; 0x803f05 <i>
 1e4:	10 92 06 3f 	sts	0x3F06, r1	; 0x803f06 <i+0x1>

	// The interrupt flag has to be cleared manually
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <port_a_b_outs+0x7f87b3>
}
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <__vector_13>:


ISR(TCB0_INT_vect)
{
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	8f 93       	push	r24
	// Counting consecutive ticks of pressed or released button. Debouncing and short and long press detection.
	if (~PORTA.IN & btn_pin){
 21c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <port_a_b_outs+0x7f81b0>
 220:	86 fd       	sbrc	r24, 6
 222:	08 c0       	rjmp	.+16     	; 0x234 <__vector_13+0x24>
		consecutive_counts_pressed++;
 224:	80 91 07 3f 	lds	r24, 0x3F07	; 0x803f07 <consecutive_counts_pressed>
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	80 93 07 3f 	sts	0x3F07, r24	; 0x803f07 <consecutive_counts_pressed>
		consecutive_counts_released=0;
 22e:	10 92 04 3f 	sts	0x3F04, r1	; 0x803f04 <consecutive_counts_released>
 232:	07 c0       	rjmp	.+14     	; 0x242 <__vector_13+0x32>
	}
	else{
		consecutive_counts_pressed=0;
 234:	10 92 07 3f 	sts	0x3F07, r1	; 0x803f07 <consecutive_counts_pressed>
		consecutive_counts_released++;
 238:	80 91 04 3f 	lds	r24, 0x3F04	; 0x803f04 <consecutive_counts_released>
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	80 93 04 3f 	sts	0x3F04, r24	; 0x803f04 <consecutive_counts_released>
	}
	TCB0.INTFLAGS = TCB_CAPT_bm; /* Clear the interrupt flag */
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <port_a_b_outs+0x7f87ee>

 248:	8f 91       	pop	r24
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
