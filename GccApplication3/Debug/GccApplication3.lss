
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00803f00  00000228  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000228  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00803f20  00803f20  000002dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c45  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001651  00000000  00000000  00001fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000408  00000000  00000000  00003616  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00003a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ed6  00000000  00000000  00003aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a6  00000000  00000000  0000497e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00004b24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	be c0       	rjmp	.+380    	; 0x184 <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	fc c0       	rjmp	.+504    	; 0x206 <__vector_6>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1f e3       	ldi	r17, 0x3F	; 63
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	bf e3       	ldi	r27, 0x3F	; 63
  46:	e8 e2       	ldi	r30, 0x28	; 40
  48:	f2 e0       	ldi	r31, 0x02	; 2
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 32       	cpi	r26, 0x20	; 32
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2f e3       	ldi	r18, 0x3F	; 63
  58:	a0 e2       	ldi	r26, 0x20	; 32
  5a:	bf e3       	ldi	r27, 0x3F	; 63
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a4 32       	cpi	r26, 0x24	; 36
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	14 d0       	rcall	.+40     	; 0x90 <main>
  68:	dd c0       	rjmp	.+442    	; 0x224 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <RTC_init>:
const uint8_t btn_pin = PIN6_bm; // PORT C
volatile int x ;
volatile int i ;

void RTC_init(int RTCdelay)
{
  6c:	9c 01       	movw	r18, r24
	RTC.CLKSEL = RTC_CLKSEL_INT32K_gc;    // 32.768kHz Internal Crystal Oscillator (INT32K)
  6e:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__RODATA_PM_OFFSET__+0x7f8147>

	while (RTC.STATUS > 0);               // Wait for all register to be synchronized
  72:	e0 e4       	ldi	r30, 0x40	; 64
  74:	f1 e0       	ldi	r31, 0x01	; 1
  76:	91 81       	ldd	r25, Z+1	; 0x01
  78:	91 11       	cpse	r25, r1
  7a:	fd cf       	rjmp	.-6      	; 0x76 <RTC_init+0xa>
	RTC.PER = RTCdelay;                   // Set period for delay
  7c:	e0 e4       	ldi	r30, 0x40	; 64
  7e:	f1 e0       	ldi	r31, 0x01	; 1
  80:	22 87       	std	Z+10, r18	; 0x0a
  82:	33 87       	std	Z+11, r19	; 0x0b
	RTC.INTCTRL |= RTC_OVF_bm;            // Enable overflow Interrupt which will trigger ISR
  84:	82 81       	ldd	r24, Z+2	; 0x02
  86:	81 60       	ori	r24, 0x01	; 1
  88:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRLA = RTC_PRESCALER_DIV32768_gc    // 32768 / 32 = 1024 (sec) ~ 1 ms
  8a:	89 ef       	ldi	r24, 0xF9	; 249
  8c:	80 83       	st	Z, r24
  8e:	08 95       	ret

00000090 <main>:
}

int main() {


	RTC_init(1);
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	eb df       	rcall	.-42     	; 0x6c <RTC_init>

	
	PORTA.DIRSET = 0b10111111;
  96:	e0 e0       	ldi	r30, 0x00	; 0
  98:	f4 e0       	ldi	r31, 0x04	; 4
  9a:	8f eb       	ldi	r24, 0xBF	; 191
  9c:	81 83       	std	Z+1, r24	; 0x01
	PORTB.DIRSET = 0b11111111;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__RODATA_PM_OFFSET__+0x7f8421>

	// Button setup
	PORTA.PIN6CTRL = PORT_ISC_FALLING_gc | PORT_PULLUPEN_bm; // Enable pull-up resistor
  a4:	8b e0       	ldi	r24, 0x0B	; 11
  a6:	86 8b       	std	Z+22, r24	; 0x16

	i;
  a8:	80 91 22 3f 	lds	r24, 0x3F22	; 0x803f22 <i>
  ac:	90 91 23 3f 	lds	r25, 0x3F23	; 0x803f23 <i+0x1>
	x=0;
  b0:	10 92 20 3f 	sts	0x3F20, r1	; 0x803f20 <__data_end>
  b4:	10 92 21 3f 	sts	0x3F21, r1	; 0x803f21 <__data_end+0x1>

	sei(); // Set global interrupts
  b8:	78 94       	sei
	while(1){
		for (int c=0; c<=STAY_ON_TIME*100/RUN_TROUGH_SPEED/16; c++){
			for (i=0; i<=15; i++){
				if (i<=x){
					
					PORTA.OUT = port_a_b_outs[i][0];
  ba:	c0 e0       	ldi	r28, 0x00	; 0
  bc:	d4 e0       	ldi	r29, 0x04	; 4
					PORTB.OUT= port_a_b_outs[i][1];
  be:	a0 e2       	ldi	r26, 0x20	; 32
  c0:	b4 e0       	ldi	r27, 0x04	; 4
				_delay_ms(RUN_TROUGH_SPEED);
			}
		}
		
		
		PORTA.OUT = port_a_b_outs[16][0];
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	1f e3       	ldi	r17, 0x3F	; 63
		PORTB.OUT= port_a_b_outs[16][1];
		set_sleep_mode(SLEEP_MODE_IDLE);
  c6:	40 e5       	ldi	r20, 0x50	; 80
  c8:	50 e0       	ldi	r21, 0x00	; 0
		cli();
		sleep_enable();
		PORTA_INTFLAGS |= PORT_INT7_bm;
  ca:	69 e0       	ldi	r22, 0x09	; 9
  cc:	74 e0       	ldi	r23, 0x04	; 4
	RTC.CTRLA = RTC_PRESCALER_DIV32768_gc    // 32768 / 32 = 1024 (sec) ~ 1 ms
	| RTC_RTCEN_bm                        // Enable: enabled
	| RTC_RUNSTDBY_bm;                    // Run In Standby: enabled
}

int main() {
  ce:	20 e2       	ldi	r18, 0x20	; 32
  d0:	30 e0       	ldi	r19, 0x00	; 0
	x=0;

	sei(); // Set global interrupts
	while(1){
		for (int c=0; c<=STAY_ON_TIME*100/RUN_TROUGH_SPEED/16; c++){
			for (i=0; i<=15; i++){
  d2:	10 92 22 3f 	sts	0x3F22, r1	; 0x803f22 <i>
  d6:	10 92 23 3f 	sts	0x3F23, r1	; 0x803f23 <i+0x1>
  da:	80 91 22 3f 	lds	r24, 0x3F22	; 0x803f22 <i>
  de:	90 91 23 3f 	lds	r25, 0x3F23	; 0x803f23 <i+0x1>
  e2:	40 97       	sbiw	r24, 0x10	; 16
  e4:	ac f5       	brge	.+106    	; 0x150 <__DATA_REGION_LENGTH__+0x50>
				if (i<=x){
  e6:	e0 91 22 3f 	lds	r30, 0x3F22	; 0x803f22 <i>
  ea:	f0 91 23 3f 	lds	r31, 0x3F23	; 0x803f23 <i+0x1>
  ee:	80 91 20 3f 	lds	r24, 0x3F20	; 0x803f20 <__data_end>
  f2:	90 91 21 3f 	lds	r25, 0x3F21	; 0x803f21 <__data_end+0x1>
  f6:	8e 17       	cp	r24, r30
  f8:	9f 07       	cpc	r25, r31
  fa:	b4 f0       	brlt	.+44     	; 0x128 <__DATA_REGION_LENGTH__+0x28>
					
					PORTA.OUT = port_a_b_outs[i][0];
  fc:	e0 91 22 3f 	lds	r30, 0x3F22	; 0x803f22 <i>
 100:	f0 91 23 3f 	lds	r31, 0x3F23	; 0x803f23 <i+0x1>
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	e0 50       	subi	r30, 0x00	; 0
 10a:	f1 4c       	sbci	r31, 0xC1	; 193
 10c:	80 81       	ld	r24, Z
 10e:	8c 83       	std	Y+4, r24	; 0x04
					PORTB.OUT= port_a_b_outs[i][1];
 110:	e0 91 22 3f 	lds	r30, 0x3F22	; 0x803f22 <i>
 114:	f0 91 23 3f 	lds	r31, 0x3F23	; 0x803f23 <i+0x1>
 118:	ee 0f       	add	r30, r30
 11a:	ff 1f       	adc	r31, r31
 11c:	e0 50       	subi	r30, 0x00	; 0
 11e:	f1 4c       	sbci	r31, 0xC1	; 193
 120:	81 81       	ldd	r24, Z+1	; 0x01
 122:	14 96       	adiw	r26, 0x04	; 4
 124:	8c 93       	st	X, r24
 126:	14 97       	sbiw	r26, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	81 e4       	ldi	r24, 0x41	; 65
 12a:	93 e0       	ldi	r25, 0x03	; 3
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <__DATA_REGION_LENGTH__+0x2c>
 130:	00 00       	nop
	x=0;

	sei(); // Set global interrupts
	while(1){
		for (int c=0; c<=STAY_ON_TIME*100/RUN_TROUGH_SPEED/16; c++){
			for (i=0; i<=15; i++){
 132:	80 91 22 3f 	lds	r24, 0x3F22	; 0x803f22 <i>
 136:	90 91 23 3f 	lds	r25, 0x3F23	; 0x803f23 <i+0x1>
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	80 93 22 3f 	sts	0x3F22, r24	; 0x803f22 <i>
 140:	90 93 23 3f 	sts	0x3F23, r25	; 0x803f23 <i+0x1>
 144:	80 91 22 3f 	lds	r24, 0x3F22	; 0x803f22 <i>
 148:	90 91 23 3f 	lds	r25, 0x3F23	; 0x803f23 <i+0x1>
 14c:	40 97       	sbiw	r24, 0x10	; 16
 14e:	5c f2       	brlt	.-106    	; 0xe6 <main+0x56>
 150:	21 50       	subi	r18, 0x01	; 1
 152:	31 09       	sbc	r19, r1
	i;
	x=0;

	sei(); // Set global interrupts
	while(1){
		for (int c=0; c<=STAY_ON_TIME*100/RUN_TROUGH_SPEED/16; c++){
 154:	09 f0       	breq	.+2      	; 0x158 <__DATA_REGION_LENGTH__+0x58>
 156:	bd cf       	rjmp	.-134    	; 0xd2 <main+0x42>
				_delay_ms(RUN_TROUGH_SPEED);
			}
		}
		
		
		PORTA.OUT = port_a_b_outs[16][0];
 158:	f8 01       	movw	r30, r16
 15a:	80 a1       	ldd	r24, Z+32	; 0x20
 15c:	8c 83       	std	Y+4, r24	; 0x04
		PORTB.OUT= port_a_b_outs[16][1];
 15e:	81 a1       	ldd	r24, Z+33	; 0x21
 160:	14 96       	adiw	r26, 0x04	; 4
 162:	8c 93       	st	X, r24
 164:	14 97       	sbiw	r26, 0x04	; 4
		set_sleep_mode(SLEEP_MODE_IDLE);
 166:	fa 01       	movw	r30, r20
 168:	80 81       	ld	r24, Z
 16a:	89 7f       	andi	r24, 0xF9	; 249
 16c:	80 83       	st	Z, r24
		cli();
 16e:	f8 94       	cli
		sleep_enable();
 170:	80 81       	ld	r24, Z
 172:	81 60       	ori	r24, 0x01	; 1
 174:	80 83       	st	Z, r24
		PORTA_INTFLAGS |= PORT_INT7_bm;
 176:	fb 01       	movw	r30, r22
 178:	80 81       	ld	r24, Z
 17a:	80 68       	ori	r24, 0x80	; 128
 17c:	80 83       	st	Z, r24
		// Toggle state of pin 4
		sei();
 17e:	78 94       	sei
		sleep_cpu();
 180:	88 95       	sleep
		
	}
 182:	a5 cf       	rjmp	.-182    	; 0xce <main+0x3e>

00000184 <__vector_3>:


}
ISR(PORTA_PORT_vect) {
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	ef 93       	push	r30
 196:	ff 93       	push	r31
	PORTA.OUT = port_a_b_outs[16][0];
 198:	e0 e0       	ldi	r30, 0x00	; 0
 19a:	ff e3       	ldi	r31, 0x3F	; 63
 19c:	80 a1       	ldd	r24, Z+32	; 0x20
 19e:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__RODATA_PM_OFFSET__+0x7f8404>
	PORTB.OUT= port_a_b_outs[16][1];
 1a2:	81 a1       	ldd	r24, Z+33	; 0x21
 1a4:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <__RODATA_PM_OFFSET__+0x7f8424>
	while (~PORTA.IN& btn_pin){}
 1a8:	e0 e0       	ldi	r30, 0x00	; 0
 1aa:	f4 e0       	ldi	r31, 0x04	; 4
 1ac:	80 85       	ldd	r24, Z+8	; 0x08
 1ae:	86 ff       	sbrs	r24, 6
 1b0:	fd cf       	rjmp	.-6      	; 0x1ac <__vector_3+0x28>
	x++;
 1b2:	80 91 20 3f 	lds	r24, 0x3F20	; 0x803f20 <__data_end>
 1b6:	90 91 21 3f 	lds	r25, 0x3F21	; 0x803f21 <__data_end+0x1>
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	80 93 20 3f 	sts	0x3F20, r24	; 0x803f20 <__data_end>
 1c0:	90 93 21 3f 	sts	0x3F21, r25	; 0x803f21 <__data_end+0x1>
	if (x >15){
 1c4:	80 91 20 3f 	lds	r24, 0x3F20	; 0x803f20 <__data_end>
 1c8:	90 91 21 3f 	lds	r25, 0x3F21	; 0x803f21 <__data_end+0x1>
 1cc:	40 97       	sbiw	r24, 0x10	; 16
 1ce:	24 f0       	brlt	.+8      	; 0x1d8 <__vector_3+0x54>
		x=0;
 1d0:	10 92 20 3f 	sts	0x3F20, r1	; 0x803f20 <__data_end>
 1d4:	10 92 21 3f 	sts	0x3F21, r1	; 0x803f21 <__data_end+0x1>
 1d8:	2a e6       	ldi	r18, 0x6A	; 106
 1da:	84 e0       	ldi	r24, 0x04	; 4
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	90 40       	sbci	r25, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <__vector_3+0x5a>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <__vector_3+0x64>
	}
	_delay_ms(100);
	PORTA.INTFLAGS |= btn_pin; // Clear interrupt flag
 1e8:	e0 e0       	ldi	r30, 0x00	; 0
 1ea:	f4 e0       	ldi	r31, 0x04	; 4
 1ec:	81 85       	ldd	r24, Z+9	; 0x09
 1ee:	80 64       	ori	r24, 0x40	; 64
 1f0:	81 87       	std	Z+9, r24	; 0x09
}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	2f 91       	pop	r18
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <__vector_6>:

ISR(RTC_CNT_vect)
{
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	8f 93       	push	r24
	RTC.INTFLAGS = RTC_OVF_bm;            // Clear flag by writing '1':
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__RODATA_PM_OFFSET__+0x7f8143>
 218:	8f 91       	pop	r24
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <_exit>:
 224:	f8 94       	cli

00000226 <__stop_program>:
 226:	ff cf       	rjmp	.-2      	; 0x226 <__stop_program>
