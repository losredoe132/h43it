
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803f00  00803f00  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000022  000081e2  000001e2  00000276  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000006  00803f00  00803f00  00000298  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001ca8  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001694  00000000  00000000  00001ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000041b  00000000  00000000  00003688  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000a8  00000000  00000000  00003aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000ee3  00000000  00000000  00003b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001cf  00000000  00000000  00004a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00004bfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	9e c0       	rjmp	.+316    	; 0x144 <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	d9 c0       	rjmp	.+434    	; 0x1c0 <__vector_6>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2f e3       	ldi	r18, 0x3F	; 63
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	bf e3       	ldi	r27, 0x3F	; 63
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a6 30       	cpi	r26, 0x06	; 6
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	26 d0       	rcall	.+76     	; 0x9e <main>
  52:	c5 c0       	rjmp	.+394    	; 0x1de <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <RTCA_init>:
volatile int x ;
int i ;
int j ;

void RTCA_init(int RTCdelay)
{
  56:	9c 01       	movw	r18, r24
	RTC.CLKSEL = RTC_CLKSEL_INT32K_gc;    // 32.768kHz Internal Crystal Oscillator (INT32K)
  58:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <port_a_b_outs+0x7f7f65>

	while (RTC.STATUS > 0);               // Wait for all register to be synchronized
  5c:	e0 e4       	ldi	r30, 0x40	; 64
  5e:	f1 e0       	ldi	r31, 0x01	; 1
  60:	91 81       	ldd	r25, Z+1	; 0x01
  62:	91 11       	cpse	r25, r1
  64:	fd cf       	rjmp	.-6      	; 0x60 <RTCA_init+0xa>
	RTC.PER = RTCdelay;                   // Set period for delay
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	22 87       	std	Z+10, r18	; 0x0a
  6c:	33 87       	std	Z+11, r19	; 0x0b
	RTC.INTCTRL |= RTC_OVF_bm;            // Enable overflow Interrupt which will trigger ISR
  6e:	82 81       	ldd	r24, Z+2	; 0x02
  70:	81 60       	ori	r24, 0x01	; 1
  72:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRLA = RTC_PRESCALER_DIV32768_gc    // 32768 / 32 = 1024 (sec) ~ 1 ms
  74:	89 ef       	ldi	r24, 0xF9	; 249
  76:	80 83       	st	Z, r24
  78:	08 95       	ret

0000007a <LEDOnById>:
}



void LEDOnById(int i){
	PORTA.OUT = port_a_b_outs[i][0];
  7a:	88 0f       	add	r24, r24
  7c:	99 1f       	adc	r25, r25
  7e:	fc 01       	movw	r30, r24
  80:	ee 51       	subi	r30, 0x1E	; 30
  82:	fe 47       	sbci	r31, 0x7E	; 126
  84:	80 81       	ld	r24, Z
  86:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <port_a_b_outs+0x7f8222>
	PORTB.OUT= port_a_b_outs[i][1];
  8a:	81 81       	ldd	r24, Z+1	; 0x01
  8c:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <port_a_b_outs+0x7f8242>
  90:	08 95       	ret

00000092 <allLEDoff>:
}

void allLEDoff(){
	PORTA.OUT = port_a_b_outs[0][0];
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <port_a_b_outs+0x7f8222>
	PORTB.OUT= port_a_b_outs[0][1];
  98:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <port_a_b_outs+0x7f8242>
  9c:	08 95       	ret

0000009e <main>:
}

int main() {


	RTCA_init(10); // set periodic RTC triggering "awakening" delay in seconds
  9e:	8a e0       	ldi	r24, 0x0A	; 10
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	d9 df       	rcall	.-78     	; 0x56 <RTCA_init>

	
	PORTA.DIRSET = 0b10111111;
  a4:	e0 e0       	ldi	r30, 0x00	; 0
  a6:	f4 e0       	ldi	r31, 0x04	; 4
  a8:	8f eb       	ldi	r24, 0xBF	; 191
  aa:	81 83       	std	Z+1, r24	; 0x01
	PORTB.DIRSET = 0b11111111;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <port_a_b_outs+0x7f823f>

	// Button setup
	PORTA.PIN6CTRL = PORT_ISC_FALLING_gc | PORT_PULLUPEN_bm; // Enable pull-up resistor
  b2:	8b e0       	ldi	r24, 0x0B	; 11
  b4:	86 8b       	std	Z+22, r24	; 0x16

	x=8;
  b6:	88 e0       	ldi	r24, 0x08	; 8
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	80 93 02 3f 	sts	0x3F02, r24	; 0x803f02 <x>
  be:	90 93 03 3f 	sts	0x3F03, r25	; 0x803f03 <x+0x1>

	sei(); // Set global interrupts
  c2:	78 94       	sei
		
		// TODO AWAKEING Animation!

		
		for (int c=0; c<=STAY_ON_TIME*1000/RUN_TROUGH_SPEED/16; c++){
			for (i=1; i<=16; i++){
  c4:	ee 24       	eor	r14, r14
  c6:	e3 94       	inc	r14
  c8:	f1 2c       	mov	r15, r1
				_delay_ms(RUN_TROUGH_SPEED);
			}
		}

		allLEDoff();
		set_sleep_mode(SLEEP_MODE_IDLE);
  ca:	00 e5       	ldi	r16, 0x50	; 80
  cc:	10 e0       	ldi	r17, 0x00	; 0
		cli();
		sleep_enable();
		PORTA_INTFLAGS |= PORT_INT7_bm;
  ce:	0f 2e       	mov	r0, r31
  d0:	f9 e0       	ldi	r31, 0x09	; 9
  d2:	cf 2e       	mov	r12, r31
  d4:	f4 e0       	ldi	r31, 0x04	; 4
  d6:	df 2e       	mov	r13, r31
  d8:	f0 2d       	mov	r31, r0
void allLEDoff(){
	PORTA.OUT = port_a_b_outs[0][0];
	PORTB.OUT= port_a_b_outs[0][1];
}

int main() {
  da:	c9 e3       	ldi	r28, 0x39	; 57
  dc:	d1 e0       	ldi	r29, 0x01	; 1
		
		// TODO AWAKEING Animation!

		
		for (int c=0; c<=STAY_ON_TIME*1000/RUN_TROUGH_SPEED/16; c++){
			for (i=1; i<=16; i++){
  de:	e0 92 04 3f 	sts	0x3F04, r14	; 0x803f04 <i>
  e2:	f0 92 05 3f 	sts	0x3F05, r15	; 0x803f05 <i+0x1>
  e6:	8e 2d       	mov	r24, r14
  e8:	9f 2d       	mov	r25, r15
				if (i<=x){
  ea:	20 91 02 3f 	lds	r18, 0x3F02	; 0x803f02 <x>
  ee:	30 91 03 3f 	lds	r19, 0x3F03	; 0x803f03 <x+0x1>
  f2:	28 17       	cp	r18, r24
  f4:	39 07       	cpc	r19, r25
  f6:	14 f0       	brlt	.+4      	; 0xfc <main+0x5e>
					
					LEDOnById(i);
  f8:	c0 df       	rcall	.-128    	; 0x7a <LEDOnById>
  fa:	01 c0       	rjmp	.+2      	; 0xfe <main+0x60>
				}
				else{
					allLEDoff();
  fc:	ca df       	rcall	.-108    	; 0x92 <allLEDoff>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	81 e4       	ldi	r24, 0x41	; 65
 100:	93 e0       	ldi	r25, 0x03	; 3
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <__DATA_REGION_LENGTH__+0x2>
 106:	00 00       	nop
		
		// TODO AWAKEING Animation!

		
		for (int c=0; c<=STAY_ON_TIME*1000/RUN_TROUGH_SPEED/16; c++){
			for (i=1; i<=16; i++){
 108:	80 91 04 3f 	lds	r24, 0x3F04	; 0x803f04 <i>
 10c:	90 91 05 3f 	lds	r25, 0x3F05	; 0x803f05 <i+0x1>
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	80 93 04 3f 	sts	0x3F04, r24	; 0x803f04 <i>
 116:	90 93 05 3f 	sts	0x3F05, r25	; 0x803f05 <i+0x1>
 11a:	81 31       	cpi	r24, 0x11	; 17
 11c:	91 05       	cpc	r25, r1
 11e:	2c f3       	brlt	.-54     	; 0xea <main+0x4c>
 120:	21 97       	sbiw	r28, 0x01	; 1
	while(1){
		
		// TODO AWAKEING Animation!

		
		for (int c=0; c<=STAY_ON_TIME*1000/RUN_TROUGH_SPEED/16; c++){
 122:	e9 f6       	brne	.-70     	; 0xde <main+0x40>
				}
				_delay_ms(RUN_TROUGH_SPEED);
			}
		}

		allLEDoff();
 124:	b6 df       	rcall	.-148    	; 0x92 <allLEDoff>
		set_sleep_mode(SLEEP_MODE_IDLE);
 126:	f8 01       	movw	r30, r16
 128:	80 81       	ld	r24, Z
 12a:	89 7f       	andi	r24, 0xF9	; 249
 12c:	80 83       	st	Z, r24
		cli();
 12e:	f8 94       	cli
		sleep_enable();
 130:	80 81       	ld	r24, Z
 132:	81 60       	ori	r24, 0x01	; 1
 134:	80 83       	st	Z, r24
		PORTA_INTFLAGS |= PORT_INT7_bm;
 136:	f6 01       	movw	r30, r12
 138:	80 81       	ld	r24, Z
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	80 83       	st	Z, r24
		// Toggle state of pin 4
		sei();
 13e:	78 94       	sei
		sleep_cpu();
 140:	88 95       	sleep
		
	}
 142:	cb cf       	rjmp	.-106    	; 0xda <main+0x3c>

00000144 <__vector_3>:


}
ISR(PORTA_PORT_vect) {
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
 158:	25 ed       	ldi	r18, 0xD5	; 213
 15a:	88 e0       	ldi	r24, 0x08	; 8
 15c:	92 e0       	ldi	r25, 0x02	; 2
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <__vector_3+0x1a>

	_delay_ms(200);
	// if button is still pressed
	if (~PORTA.IN& btn_pin){
 166:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <port_a_b_outs+0x7f8226>
 16a:	86 fd       	sbrc	r24, 6
 16c:	15 c0       	rjmp	.+42     	; 0x198 <__vector_3+0x54>
		x++;
 16e:	80 91 02 3f 	lds	r24, 0x3F02	; 0x803f02 <x>
 172:	90 91 03 3f 	lds	r25, 0x3F03	; 0x803f03 <x+0x1>
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	80 93 02 3f 	sts	0x3F02, r24	; 0x803f02 <x>
 17c:	90 93 03 3f 	sts	0x3F03, r25	; 0x803f03 <x+0x1>
		if (x >17){
 180:	80 91 02 3f 	lds	r24, 0x3F02	; 0x803f02 <x>
 184:	90 91 03 3f 	lds	r25, 0x3F03	; 0x803f03 <x+0x1>
 188:	42 97       	sbiw	r24, 0x12	; 18
 18a:	34 f0       	brlt	.+12     	; 0x198 <__vector_3+0x54>
			x=16;
 18c:	80 e1       	ldi	r24, 0x10	; 16
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	80 93 02 3f 	sts	0x3F02, r24	; 0x803f02 <x>
 194:	90 93 03 3f 	sts	0x3F03, r25	; 0x803f03 <x+0x1>
		}
	}
	// wait until user released button
	while (~PORTA.IN& btn_pin)
 198:	e0 e0       	ldi	r30, 0x00	; 0
 19a:	f4 e0       	ldi	r31, 0x04	; 4
 19c:	80 85       	ldd	r24, Z+8	; 0x08
 19e:	86 ff       	sbrs	r24, 6
 1a0:	fd cf       	rjmp	.-6      	; 0x19c <__vector_3+0x58>
	{
	}
	PORTA.INTFLAGS |= btn_pin; // Clear interrupt flag
 1a2:	e0 e0       	ldi	r30, 0x00	; 0
 1a4:	f4 e0       	ldi	r31, 0x04	; 4
 1a6:	81 85       	ldd	r24, Z+9	; 0x09
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	81 87       	std	Z+9, r24	; 0x09
}
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	2f 91       	pop	r18
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <__vector_6>:

ISR(RTC_CNT_vect)
{
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
	RTC.INTFLAGS = RTC_OVF_bm;            // Clear flag by writing '1':
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <port_a_b_outs+0x7f7f61>
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
