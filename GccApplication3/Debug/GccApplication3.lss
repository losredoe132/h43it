
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00803f00  0000018e  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00803f40  00803f40  00000262  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018f6  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015c5  00000000  00000000  00001bee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000353  00000000  00000000  000031b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00003508  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c37  00000000  00000000  00003560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b6  00000000  00000000  00004197  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000424d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	85 c0       	rjmp	.+266    	; 0x112 <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1f e3       	ldi	r17, 0x3F	; 63
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	bf e3       	ldi	r27, 0x3F	; 63
  46:	ee e8       	ldi	r30, 0x8E	; 142
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 34       	cpi	r26, 0x40	; 64
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2f e3       	ldi	r18, 0x3F	; 63
  58:	a0 e4       	ldi	r26, 0x40	; 64
  5a:	bf e3       	ldi	r27, 0x3F	; 63
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a4 34       	cpi	r26, 0x44	; 68
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	90 c0       	rjmp	.+288    	; 0x18a <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:

	//
	// 	PORTA.DIRSET=0b00000100;
	// 	PORTB.DIRSET=0b00000001;
	
	PORTA.DIRSET = 0b10111111;
  6c:	e0 e0       	ldi	r30, 0x00	; 0
  6e:	f4 e0       	ldi	r31, 0x04	; 4
  70:	8f eb       	ldi	r24, 0xBF	; 191
  72:	81 83       	std	Z+1, r24	; 0x01
	PORTB.DIRSET = 0b11111111;
  74:	a0 e2       	ldi	r26, 0x20	; 32
  76:	b4 e0       	ldi	r27, 0x04	; 4
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	11 96       	adiw	r26, 0x01	; 1
  7c:	8c 93       	st	X, r24
  7e:	11 97       	sbiw	r26, 0x01	; 1

	// Button setup
	PORTA.PIN6CTRL = PORT_ISC_FALLING_gc | PORT_PULLUPEN_bm; // Enable pull-up resistor
  80:	8b e0       	ldi	r24, 0x0B	; 11
  82:	86 8b       	std	Z+22, r24	; 0x16

	i=0;
  84:	10 92 42 3f 	sts	0x3F42, r1	; 0x803f42 <i>
  88:	10 92 43 3f 	sts	0x3F43, r1	; 0x803f43 <i+0x1>
	x=2;
  8c:	82 e0       	ldi	r24, 0x02	; 2
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	80 93 40 3f 	sts	0x3F40, r24	; 0x803f40 <__data_end>
  94:	90 93 41 3f 	sts	0x3F41, r25	; 0x803f41 <__data_end+0x1>

	sei(); // Set global interrupts
  98:	78 94       	sei
	PORTA.OUT = 0b00000000;
  9a:	14 82       	std	Z+4, r1	; 0x04
	PORTB.OUT = 0b00000001;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	14 96       	adiw	r26, 0x04	; 4
  a0:	8c 93       	st	X, r24

	while(1){

		for (i=0; i<=x; i++)
		{
			if(~PORTA.IN & PIN6_bm){
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b4 e0       	ldi	r27, 0x04	; 4
				
			}
			else{
				PORTA.OUT = port_a_b_outs[i][0];
				PORTB.OUT = port_a_b_outs[i][1];
  a6:	c0 e2       	ldi	r28, 0x20	; 32
  a8:	d4 e0       	ldi	r29, 0x04	; 4
	
	

	while(1){

		for (i=0; i<=x; i++)
  aa:	10 92 42 3f 	sts	0x3F42, r1	; 0x803f42 <i>
  ae:	10 92 43 3f 	sts	0x3F43, r1	; 0x803f43 <i+0x1>
  b2:	80 91 40 3f 	lds	r24, 0x3F40	; 0x803f40 <__data_end>
  b6:	90 91 41 3f 	lds	r25, 0x3F41	; 0x803f41 <__data_end+0x1>
  ba:	99 23       	and	r25, r25
  bc:	b4 f3       	brlt	.-20     	; 0xaa <__EEPROM_REGION_LENGTH__+0x2a>
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
		{
			if(~PORTA.IN & PIN6_bm){
  c2:	18 96       	adiw	r26, 0x08	; 8
  c4:	2c 91       	ld	r18, X
  c6:	18 97       	sbiw	r26, 0x08	; 8
  c8:	26 ff       	sbrs	r18, 6
  ca:	0d c0       	rjmp	.+26     	; 0xe6 <__EEPROM_REGION_LENGTH__+0x66>
				
			}
			else{
				PORTA.OUT = port_a_b_outs[i][0];
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	fc 01       	movw	r30, r24
  d6:	e0 50       	subi	r30, 0x00	; 0
  d8:	f1 4c       	sbci	r31, 0xC1	; 193
  da:	80 81       	ld	r24, Z
  dc:	14 96       	adiw	r26, 0x04	; 4
  de:	8c 93       	st	X, r24
  e0:	14 97       	sbiw	r26, 0x04	; 4
				PORTB.OUT = port_a_b_outs[i][1];
  e2:	82 81       	ldd	r24, Z+2	; 0x02
  e4:	8c 83       	std	Y+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	81 e4       	ldi	r24, 0x41	; 65
  e8:	93 e0       	ldi	r25, 0x03	; 3
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <__EEPROM_REGION_LENGTH__+0x6a>
  ee:	00 00       	nop
	
	

	while(1){

		for (i=0; i<=x; i++)
  f0:	80 91 42 3f 	lds	r24, 0x3F42	; 0x803f42 <i>
  f4:	90 91 43 3f 	lds	r25, 0x3F43	; 0x803f43 <i+0x1>
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	80 93 42 3f 	sts	0x3F42, r24	; 0x803f42 <i>
  fe:	90 93 43 3f 	sts	0x3F43, r25	; 0x803f43 <i+0x1>
 102:	20 91 40 3f 	lds	r18, 0x3F40	; 0x803f40 <__data_end>
 106:	30 91 41 3f 	lds	r19, 0x3F41	; 0x803f41 <__data_end+0x1>
 10a:	28 17       	cp	r18, r24
 10c:	39 07       	cpc	r19, r25
 10e:	cc f6       	brge	.-78     	; 0xc2 <__EEPROM_REGION_LENGTH__+0x42>
 110:	cc cf       	rjmp	.-104    	; 0xaa <__EEPROM_REGION_LENGTH__+0x2a>

00000112 <__vector_3>:
		}
	}


}
ISR(PORTA_PORT_vect) {
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31

	
	if (i <=15){
 126:	80 91 42 3f 	lds	r24, 0x3F42	; 0x803f42 <i>
 12a:	90 91 43 3f 	lds	r25, 0x3F43	; 0x803f43 <i+0x1>
 12e:	40 97       	sbiw	r24, 0x10	; 16
 130:	54 f4       	brge	.+20     	; 0x146 <__vector_3+0x34>
		x++;
 132:	80 91 40 3f 	lds	r24, 0x3F40	; 0x803f40 <__data_end>
 136:	90 91 41 3f 	lds	r25, 0x3F41	; 0x803f41 <__data_end+0x1>
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	80 93 40 3f 	sts	0x3F40, r24	; 0x803f40 <__data_end>
 140:	90 93 41 3f 	sts	0x3F41, r25	; 0x803f41 <__data_end+0x1>
 144:	06 c0       	rjmp	.+12     	; 0x152 <__vector_3+0x40>
	}
	else{
		x=1;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	80 93 40 3f 	sts	0x3F40, r24	; 0x803f40 <__data_end>
 14e:	90 93 41 3f 	sts	0x3F41, r25	; 0x803f41 <__data_end+0x1>
 152:	2a e6       	ldi	r18, 0x6A	; 106
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <__vector_3+0x46>
 160:	00 c0       	rjmp	.+0      	; 0x162 <__vector_3+0x50>
	}
	_delay_ms(100);
	while (~PORTA.IN& btn_pin){
 162:	e0 e0       	ldi	r30, 0x00	; 0
 164:	f4 e0       	ldi	r31, 0x04	; 4
 166:	80 85       	ldd	r24, Z+8	; 0x08
 168:	86 ff       	sbrs	r24, 6
 16a:	fd cf       	rjmp	.-6      	; 0x166 <__vector_3+0x54>
		
	}
	PORTA.INTFLAGS |= btn_pin; // Clear interrupt flag
 16c:	e0 e0       	ldi	r30, 0x00	; 0
 16e:	f4 e0       	ldi	r31, 0x04	; 4
 170:	81 85       	ldd	r24, Z+9	; 0x09
 172:	80 64       	ori	r24, 0x40	; 64
 174:	81 87       	std	Z+9, r24	; 0x09

 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
