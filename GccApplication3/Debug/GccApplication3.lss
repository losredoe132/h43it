
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00803f00  0000018e  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00803f40  00803f40  00000262  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bfc  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001642  00000000  00000000  00001f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000372  00000000  00000000  00003546  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000038b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ed6  00000000  00000000  0000394c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ee  00000000  00000000  00004822  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00004910  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	65 c0       	rjmp	.+202    	; 0xd2 <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	91 c0       	rjmp	.+290    	; 0x130 <__vector_6>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1f e3       	ldi	r17, 0x3F	; 63
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	bf e3       	ldi	r27, 0x3F	; 63
  46:	ee e8       	ldi	r30, 0x8E	; 142
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 34       	cpi	r26, 0x40	; 64
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2f e3       	ldi	r18, 0x3F	; 63
  58:	a0 e4       	ldi	r26, 0x40	; 64
  5a:	bf e3       	ldi	r27, 0x3F	; 63
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a4 34       	cpi	r26, 0x44	; 68
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	14 d0       	rcall	.+40     	; 0x90 <main>
  68:	90 c0       	rjmp	.+288    	; 0x18a <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <RTC_init>:
const uint8_t btn_pin = PIN6_bm; // PORT C
volatile int x ;
volatile int i ;

void RTC_init(int RTCdelay)
{
  6c:	9c 01       	movw	r18, r24
	RTC.CLKSEL = RTC_CLKSEL_INT32K_gc;    // 32.768kHz Internal Crystal Oscillator (INT32K)
  6e:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__RODATA_PM_OFFSET__+0x7f8147>

	while (RTC.STATUS > 0);               // Wait for all register to be synchronized
  72:	e0 e4       	ldi	r30, 0x40	; 64
  74:	f1 e0       	ldi	r31, 0x01	; 1
  76:	91 81       	ldd	r25, Z+1	; 0x01
  78:	91 11       	cpse	r25, r1
  7a:	fd cf       	rjmp	.-6      	; 0x76 <RTC_init+0xa>
	RTC.PER = RTCdelay;                   // Set period for delay
  7c:	e0 e4       	ldi	r30, 0x40	; 64
  7e:	f1 e0       	ldi	r31, 0x01	; 1
  80:	22 87       	std	Z+10, r18	; 0x0a
  82:	33 87       	std	Z+11, r19	; 0x0b
	RTC.INTCTRL |= RTC_OVF_bm;            // Enable overflow Interrupt which will trigger ISR
  84:	82 81       	ldd	r24, Z+2	; 0x02
  86:	81 60       	ori	r24, 0x01	; 1
  88:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRLA = RTC_PRESCALER_DIV32_gc    // 32768 / 32 = 1024 (sec) ~ 1 ms
  8a:	89 ea       	ldi	r24, 0xA9	; 169
  8c:	80 83       	st	Z, r24
  8e:	08 95       	ret

00000090 <main>:

int main() {


	// LED setup
	RTC_init(100);
  90:	84 e6       	ldi	r24, 0x64	; 100
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	eb df       	rcall	.-42     	; 0x6c <RTC_init>
	//
	// 	PORTA.DIRSET=0b00000100;
	// 	PORTB.DIRSET=0b00000001;
	
	PORTA.DIRSET = 0b10111111;
  96:	e0 e0       	ldi	r30, 0x00	; 0
  98:	f4 e0       	ldi	r31, 0x04	; 4
  9a:	8f eb       	ldi	r24, 0xBF	; 191
  9c:	81 83       	std	Z+1, r24	; 0x01
	PORTB.DIRSET = 0b11111111;
  9e:	a0 e2       	ldi	r26, 0x20	; 32
  a0:	b4 e0       	ldi	r27, 0x04	; 4
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	11 96       	adiw	r26, 0x01	; 1
  a6:	8c 93       	st	X, r24
  a8:	11 97       	sbiw	r26, 0x01	; 1

	// Button setup
	PORTA.PIN6CTRL = PORT_ISC_FALLING_gc | PORT_PULLUPEN_bm; // Enable pull-up resistor
  aa:	8b e0       	ldi	r24, 0x0B	; 11
  ac:	86 8b       	std	Z+22, r24	; 0x16

	i=1;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	80 93 42 3f 	sts	0x3F42, r24	; 0x803f42 <i>
  b6:	90 93 43 3f 	sts	0x3F43, r25	; 0x803f43 <i+0x1>
	x=200;
  ba:	88 ec       	ldi	r24, 0xC8	; 200
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	80 93 40 3f 	sts	0x3F40, r24	; 0x803f40 <__data_end>
  c2:	90 93 41 3f 	sts	0x3F41, r25	; 0x803f41 <__data_end+0x1>

	PORTA.OUT = 0b00000000;
  c6:	14 82       	std	Z+4, r1	; 0x04
	PORTB.OUT = 0b00000001;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	14 96       	adiw	r26, 0x04	; 4
  cc:	8c 93       	st	X, r24
	
	sei(); // Set global interrupts
  ce:	78 94       	sei
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <main+0x40>

000000d2 <__vector_3>:
		
	}


}
ISR(PORTA_PORT_vect) {
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31

	i++;
  e6:	80 91 42 3f 	lds	r24, 0x3F42	; 0x803f42 <i>
  ea:	90 91 43 3f 	lds	r25, 0x3F43	; 0x803f43 <i+0x1>
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	80 93 42 3f 	sts	0x3F42, r24	; 0x803f42 <i>
  f4:	90 93 43 3f 	sts	0x3F43, r25	; 0x803f43 <i+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2a e6       	ldi	r18, 0x6A	; 106
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <__vector_3+0x2c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <__DATA_REGION_LENGTH__+0x8>
	_delay_ms(100);
	while (~PORTA.IN& btn_pin){
 108:	e0 e0       	ldi	r30, 0x00	; 0
 10a:	f4 e0       	ldi	r31, 0x04	; 4
 10c:	80 85       	ldd	r24, Z+8	; 0x08
 10e:	86 ff       	sbrs	r24, 6
 110:	fd cf       	rjmp	.-6      	; 0x10c <__DATA_REGION_LENGTH__+0xc>

	}
	PORTA.INTFLAGS |= btn_pin; // Clear interrupt flag
 112:	e0 e0       	ldi	r30, 0x00	; 0
 114:	f4 e0       	ldi	r31, 0x04	; 4
 116:	81 85       	ldd	r24, Z+9	; 0x09
 118:	80 64       	ori	r24, 0x40	; 64
 11a:	81 87       	std	Z+9, r24	; 0x09

}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	2f 91       	pop	r18
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <__vector_6>:

ISR(RTC_CNT_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
	RTC.INTFLAGS = RTC_OVF_bm;            // Clear flag by writing '1':
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__RODATA_PM_OFFSET__+0x7f8143>
	PORTA.OUT = port_a_b_outs[i][0];
 146:	e0 91 42 3f 	lds	r30, 0x3F42	; 0x803f42 <i>
 14a:	f0 91 43 3f 	lds	r31, 0x3F43	; 0x803f43 <i+0x1>
 14e:	ee 0f       	add	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	ee 0f       	add	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	e0 50       	subi	r30, 0x00	; 0
 158:	f1 4c       	sbci	r31, 0xC1	; 193
 15a:	80 81       	ld	r24, Z
 15c:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__RODATA_PM_OFFSET__+0x7f8404>
	PORTB.OUTTGL= port_a_b_outs[i][1];
 160:	e0 91 42 3f 	lds	r30, 0x3F42	; 0x803f42 <i>
 164:	f0 91 43 3f 	lds	r31, 0x3F43	; 0x803f43 <i+0x1>
 168:	ee 0f       	add	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	ee 0f       	add	r30, r30
 16e:	ff 1f       	adc	r31, r31
 170:	e0 50       	subi	r30, 0x00	; 0
 172:	f1 4c       	sbci	r31, 0xC1	; 193
 174:	82 81       	ldd	r24, Z+2	; 0x02
 176:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__RODATA_PM_OFFSET__+0x7f8427>
	
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
