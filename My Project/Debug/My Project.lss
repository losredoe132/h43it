
My Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000218  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002758  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001ce0  00000000  00000000  00002a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008f8  00000000  00000000  00004760  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00005058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000108a  00000000  00000000  00005174  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000171  00000000  00000000  000061fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000636f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62
  88:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  8c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  94:	0e 94 8a 00 	call	0x114	; 0x114 <system_init>
  98:	08 95       	ret

0000009a <main>:
#include <atmel_start.h>
#include <avr/io.h>
int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  9a:	0e 94 4a 00 	call	0x94	; 0x94 <atmel_start_init>
	
	// OUTs
	PORTA.DIR = PIN4_bm|PIN5_bm;
  9e:	80 e3       	ldi	r24, 0x30	; 48
  a0:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__RODATA_PM_OFFSET__+0x7f8400>

	// INs
	PORTB.DIRCLR  = PIN2_bm;
  a4:	e0 e2       	ldi	r30, 0x20	; 32
  a6:	f4 e0       	ldi	r31, 0x04	; 4
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	82 83       	std	Z+2, r24	; 0x02
	PORTB.PIN2CTRL |= PORT_PULLUPEN_bm;
  ac:	82 89       	ldd	r24, Z+18	; 0x12
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	82 8b       	std	Z+18, r24	; 0x12


	/* Replace with your application code */
	while (1) {
		// Read Button State
		bool status = PORTB.IN & PIN2_bm;
  b2:	a0 e2       	ldi	r26, 0x20	; 32
  b4:	b4 e0       	ldi	r27, 0x04	; 4

		PORTA.OUTCLR = PIN5_bm;
  b6:	e0 e0       	ldi	r30, 0x00	; 0
  b8:	f4 e0       	ldi	r31, 0x04	; 4
  ba:	30 e2       	ldi	r19, 0x20	; 32
  bc:	23 2f       	mov	r18, r19

		PORTA.OUTCLR = PIN4_bm;
  be:	90 e1       	ldi	r25, 0x10	; 16


	/* Replace with your application code */
	while (1) {
		// Read Button State
		bool status = PORTB.IN & PIN2_bm;
  c0:	18 96       	adiw	r26, 0x08	; 8
  c2:	8c 91       	ld	r24, X
  c4:	18 97       	sbiw	r26, 0x08	; 8

		PORTA.OUTCLR = PIN5_bm;
  c6:	26 83       	std	Z+6, r18	; 0x06

		PORTA.OUTCLR = PIN4_bm;
  c8:	96 83       	std	Z+6, r25	; 0x06

		if (!status) {
  ca:	82 fd       	sbrc	r24, 2
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <main+0x38>
			PORTA.OUTSET = PIN5_bm;
  ce:	35 83       	std	Z+5, r19	; 0x05
  d0:	f7 cf       	rjmp	.-18     	; 0xc0 <main+0x26>

		}
		else {
			PORTA.OUTSET = PIN4_bm;
  d2:	95 83       	std	Z+5, r25	; 0x05
  d4:	f5 cf       	rjmp	.-22     	; 0xc0 <main+0x26>

000000d6 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	08 95       	ret

000000da <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
  da:	4b e0       	ldi	r20, 0x0B	; 11
  dc:	68 ed       	ldi	r22, 0xD8	; 216
  de:	81 e6       	ldi	r24, 0x61	; 97
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 9f 00 	call	0x13e	; 0x13e <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	08 95       	ret

000000ea <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	08 95       	ret

000000ee <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
  ee:	e0 e1       	ldi	r30, 0x10	; 16
  f0:	f4 e0       	ldi	r31, 0x04	; 4
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  f2:	80 81       	ld	r24, Z
  f4:	88 60       	ori	r24, 0x08	; 8
  f6:	81 93       	st	Z+, r24
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  f8:	e8 31       	cpi	r30, 0x18	; 24
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	f8 07       	cpc	r31, r24
  fe:	c9 f7       	brne	.-14     	; 0xf2 <mcu_init+0x4>
 100:	e0 e3       	ldi	r30, 0x30	; 48
 102:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 104:	80 81       	ld	r24, Z
 106:	88 60       	ori	r24, 0x08	; 8
 108:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 10a:	e8 33       	cpi	r30, 0x38	; 56
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	f8 07       	cpc	r31, r24
 110:	c9 f7       	brne	.-14     	; 0x104 <__EEPROM_REGION_LENGTH__+0x4>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 112:	08 95       	ret

00000114 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 114:	0e 94 77 00 	call	0xee	; 0xee <mcu_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 118:	0c 98       	cbi	0x01, 4	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 11a:	04 9a       	sbi	0x00, 4	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 11c:	0d 98       	cbi	0x01, 5	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 11e:	05 9a       	sbi	0x00, 5	; 0
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 120:	22 98       	cbi	0x04, 2	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 122:	e2 e3       	ldi	r30, 0x32	; 50
 124:	f4 e0       	ldi	r31, 0x04	; 4
 126:	80 81       	ld	r24, Z
 128:	88 60       	ori	r24, 0x08	; 8
 12a:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_UP);

	CLKCTRL_init();
 12c:	0e 94 6d 00 	call	0xda	; 0xda <CLKCTRL_init>

	CPUINT_init();
 130:	0e 94 75 00 	call	0xea	; 0xea <CPUINT_init>

	SLPCTRL_init();
 134:	0e 94 a3 00 	call	0x146	; 0x146 <SLPCTRL_init>

	BOD_init();
 138:	0e 94 6b 00 	call	0xd6	; 0xd6 <BOD_init>
 13c:	08 95       	ret

0000013e <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 13e:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 140:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 142:	40 83       	st	Z, r20
	ret                             // Return to caller
 144:	08 95       	ret

00000146 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	08 95       	ret

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
