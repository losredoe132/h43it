
My Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b25  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000185a  00000000  00000000  00001ced  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f6  00000000  00000000  00003547  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00003840  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c90  00000000  00000000  00003864  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000044f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_clear_bss>:
  88:	28 e3       	ldi	r18, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a0 30       	cpi	r26, 0x00	; 0
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main()
{
	PORTB.DIR = 0b1111111;    // Set pin 4 as output
  a4:	8f e7       	ldi	r24, 0x7F	; 127
  a6:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__RODATA_PM_OFFSET__+0x7f8420>
	PORTA.DIR = 0b1111111;    // Set pin 4 as output
  aa:	e0 e0       	ldi	r30, 0x00	; 0
  ac:	f4 e0       	ldi	r31, 0x04	; 4
  ae:	80 83       	st	Z, r24
	PORTA.OUT = 0b1111111;
  b0:	84 83       	std	Z+4, r24	; 0x04
	
	PORTA.DIRCLR = PIN6_bm;
  b2:	80 e4       	ldi	r24, 0x40	; 64
  b4:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
  b6:	88 e0       	ldi	r24, 0x08	; 8
  b8:	86 8b       	std	Z+22, r24	; 0x16
	// PA6
	
	while(1){
		if(~PORTA.IN & PIN6_bm) /* check if PB2 is pulled to GND */
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b4 e0       	ldi	r27, 0x04	; 4
		{
			PORTB.OUTCLR = PIN1_bm; // Toggle state of pin 4
		}
		else{
			PORTB.OUTSET = PIN1_bm; // all off
  be:	e0 e2       	ldi	r30, 0x20	; 32
  c0:	f4 e0       	ldi	r31, 0x04	; 4
  c2:	92 e0       	ldi	r25, 0x02	; 2
	PORTA.DIRCLR = PIN6_bm;
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
	// PA6
	
	while(1){
		if(~PORTA.IN & PIN6_bm) /* check if PB2 is pulled to GND */
  c4:	18 96       	adiw	r26, 0x08	; 8
  c6:	8c 91       	ld	r24, X
  c8:	18 97       	sbiw	r26, 0x08	; 8
  ca:	86 fd       	sbrc	r24, 6
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <main+0x2e>
		{
			PORTB.OUTCLR = PIN1_bm; // Toggle state of pin 4
  ce:	96 83       	std	Z+6, r25	; 0x06
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <main+0x30>
		}
		else{
			PORTB.OUTSET = PIN1_bm; // all off
  d2:	95 83       	std	Z+5, r25	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	c1 e4       	ldi	r28, 0x41	; 65
  d6:	d3 e0       	ldi	r29, 0x03	; 3
  d8:	21 97       	sbiw	r28, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x34>
  dc:	00 00       	nop
  de:	f2 cf       	rjmp	.-28     	; 0xc4 <main+0x20>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
