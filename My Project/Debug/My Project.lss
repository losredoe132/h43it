
My Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000118  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  00008118  00000118  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b50  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001878  00000000  00000000  00001d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030b  00000000  00000000  000035ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000038f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c9c  00000000  00000000  0000392c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a3  00000000  00000000  000045c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  0000466b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_clear_bss>:
  88:	28 e3       	ldi	r18, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a0 30       	cpi	r26, 0x00	; 0
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
#define F_CPU 3333333
#include <avr/io.h>
#include <util/delay.h>

int main()
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	28 97       	sbiw	r28, 0x08	; 8
  ae:	cd bf       	out	0x3d, r28	; 61
  b0:	de bf       	out	0x3e, r29	; 62
	PORTB.DIR = 0b1111111;    // Set pin 4 as output
  b2:	8f e7       	ldi	r24, 0x7F	; 127
  b4:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__RODATA_PM_OFFSET__+0x7f8420>
	PORTA.DIR = 0b1111111;    // Set pin 4 as output
  b8:	e0 e0       	ldi	r30, 0x00	; 0
  ba:	f4 e0       	ldi	r31, 0x04	; 4
  bc:	80 83       	st	Z, r24
	PORTA.OUT = 0b1111111;
  be:	84 83       	std	Z+4, r24	; 0x04
	
	PORTA.DIRCLR = PIN6_bm;
  c0:	80 e4       	ldi	r24, 0x40	; 64
  c2:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
  c4:	88 e0       	ldi	r24, 0x08	; 8
  c6:	86 8b       	std	Z+22, r24	; 0x16
	// PA6
	
	int port_a_outs[4]={
  c8:	e8 e1       	ldi	r30, 0x18	; 24
  ca:	f1 e8       	ldi	r31, 0x81	; 129
  cc:	de 01       	movw	r26, r28
  ce:	11 96       	adiw	r26, 0x01	; 1
  d0:	01 90       	ld	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	8a 95       	dec	r24
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x2c>
		0b1011111
	};
	int i ;
	while(1){

		PORTB.OUT = 0b00000001; // all off
  d8:	40 e2       	ldi	r20, 0x20	; 32
  da:	54 e0       	ldi	r21, 0x04	; 4
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	9e 01       	movw	r18, r28
  e0:	27 5f       	subi	r18, 0xF7	; 247
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
		
		
		for (i=0; i<4; i++)
		{
			
			PORTA.OUT =port_a_outs[i]; // Toggle state of pin 4
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  e6:	b4 e0       	ldi	r27, 0x04	; 4
		0b1011111
	};
	int i ;
	while(1){

		PORTB.OUT = 0b00000001; // all off
  e8:	fa 01       	movw	r30, r20
  ea:	94 83       	std	Z+4, r25	; 0x04
  ec:	fe 01       	movw	r30, r28
  ee:	31 96       	adiw	r30, 0x01	; 1
		
		
		for (i=0; i<4; i++)
		{
			
			PORTA.OUT =port_a_outs[i]; // Toggle state of pin 4
  f0:	80 81       	ld	r24, Z
  f2:	32 96       	adiw	r30, 0x02	; 2
  f4:	14 96       	adiw	r26, 0x04	; 4
  f6:	8c 93       	st	X, r24
  f8:	14 97       	sbiw	r26, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	6f e7       	ldi	r22, 0x7F	; 127
  fc:	78 e3       	ldi	r23, 0x38	; 56
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	61 50       	subi	r22, 0x01	; 1
 102:	70 40       	sbci	r23, 0x00	; 0
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <__EEPROM_REGION_LENGTH__>
 108:	00 c0       	rjmp	.+0      	; 0x10a <__EEPROM_REGION_LENGTH__+0xa>
 10a:	00 00       	nop
	while(1){

		PORTB.OUT = 0b00000001; // all off
		
		
		for (i=0; i<4; i++)
 10c:	e2 17       	cp	r30, r18
 10e:	f3 07       	cpc	r31, r19
 110:	79 f7       	brne	.-34     	; 0xf0 <main+0x4c>
 112:	ea cf       	rjmp	.-44     	; 0xe8 <main+0x44>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
