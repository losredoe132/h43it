
My Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  00008126  00000126  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b56  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001878  00000000  00000000  00001dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000307  00000000  00000000  0000363a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00003944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c9e  00000000  00000000  00003978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a4  00000000  00000000  00004616  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000046ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_clear_bss>:
  88:	28 e3       	ldi	r18, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a0 30       	cpi	r26, 0x00	; 0
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

int main()
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	c0 54       	subi	r28, 0x40	; 64
  ae:	d1 09       	sbc	r29, r1
  b0:	cd bf       	out	0x3d, r28	; 61
  b2:	de bf       	out	0x3e, r29	; 62
	PORTA.DIR = 0b10111111;
  b4:	e0 e0       	ldi	r30, 0x00	; 0
  b6:	f4 e0       	ldi	r31, 0x04	; 4
  b8:	8f eb       	ldi	r24, 0xBF	; 191
  ba:	80 83       	st	Z, r24
	PORTB.DIR = 0b11111111;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__RODATA_PM_OFFSET__+0x7f8420>
	
	PORTA.DIRCLR = PIN6_bm;
  c2:	80 e4       	ldi	r24, 0x40	; 64
  c4:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
  c6:	88 e0       	ldi	r24, 0x08	; 8
  c8:	86 8b       	std	Z+22, r24	; 0x16
	// PA6
	
	int port_a_b_outs[16][2]={
  ca:	80 e4       	ldi	r24, 0x40	; 64
  cc:	e6 e2       	ldi	r30, 0x26	; 38
  ce:	f1 e8       	ldi	r31, 0x81	; 129
  d0:	de 01       	movw	r26, r28
  d2:	11 96       	adiw	r26, 0x01	; 1
  d4:	01 90       	ld	r0, Z+
  d6:	0d 92       	st	X+, r0
  d8:	8a 95       	dec	r24
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x30>
  dc:	9e 01       	movw	r18, r28
  de:	2f 5b       	subi	r18, 0xBF	; 191
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
	
	while(1){

		for (i=0; i<=15; i++)
		{
			if(~PORTA.IN & PIN6_bm){
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	14 e0       	ldi	r17, 0x04	; 4
				
			}
			else{
						PORTA.OUT = port_a_b_outs[i][0];
						PORTB.OUT = port_a_b_outs[i][1];
  e6:	40 e2       	ldi	r20, 0x20	; 32
  e8:	54 e0       	ldi	r21, 0x04	; 4
  ea:	fe 01       	movw	r30, r28
  ec:	31 96       	adiw	r30, 0x01	; 1
	
	while(1){

		for (i=0; i<=15; i++)
		{
			if(~PORTA.IN & PIN6_bm){
  ee:	d8 01       	movw	r26, r16
  f0:	18 96       	adiw	r26, 0x08	; 8
  f2:	8c 91       	ld	r24, X
  f4:	18 97       	sbiw	r26, 0x08	; 8
  f6:	86 ff       	sbrs	r24, 6
  f8:	07 c0       	rjmp	.+14     	; 0x108 <__EEPROM_REGION_LENGTH__+0x8>
				
			}
			else{
						PORTA.OUT = port_a_b_outs[i][0];
  fa:	80 81       	ld	r24, Z
  fc:	14 96       	adiw	r26, 0x04	; 4
  fe:	8c 93       	st	X, r24
						PORTB.OUT = port_a_b_outs[i][1];
 100:	82 81       	ldd	r24, Z+2	; 0x02
 102:	da 01       	movw	r26, r20
 104:	14 96       	adiw	r26, 0x04	; 4
 106:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	ba e0       	ldi	r27, 0x0A	; 10
 10a:	6b e8       	ldi	r22, 0x8B	; 139
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	b1 50       	subi	r27, 0x01	; 1
 110:	60 40       	sbci	r22, 0x00	; 0
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
 116:	00 c0       	rjmp	.+0      	; 0x118 <__EEPROM_REGION_LENGTH__+0x18>
 118:	34 96       	adiw	r30, 0x04	; 4
	
	int i;
	
	while(1){

		for (i=0; i<=15; i++)
 11a:	e2 17       	cp	r30, r18
 11c:	f3 07       	cpc	r31, r19
 11e:	39 f7       	brne	.-50     	; 0xee <main+0x4a>
 120:	e4 cf       	rjmp	.-56     	; 0xea <main+0x46>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
